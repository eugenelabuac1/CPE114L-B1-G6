module testBench;
	reg [3:0] inX;
	reg X;
	reg [3:0] n;
	wire [3:0] Q;
	wire [255:0] disp;

	operation tb(inX, X, n, disp, Q);

	initial begin
	X=1; n=3; inX=3;
	$display("\n4-Bit Circuit file operation\n");
	$display("\tIf X=0, Read from file and rotate(left) it n times");
	$display("\tIf X=1, Increment data n times and save to file");
	$display("\n	X  n    inX      Output");
	$monitor("	%b %d %d(%b) | %d(%b)  %0s", X, n, inX, inX, Q, Q, disp);
	#2 X=0; n=2;
	#2 X=1; n=4; inX=7;
	#2 X=0; n=1;
	#2 X=1; n=2; inX=8;
	#2 X=0; n=3;
	#2 $finish;
	end
endmodule

module operation(inX, X, n, disp, Q);
	input [3:0] inX;
	output reg [3:0] Q;
	input X;
	input [3:0] n;
	reg [3:0] ntmp;
	reg tmpN;
	integer fileHandle;
	reg [255:0] mem [0:255];
	output reg [255:0] disp;

	initial Q=0;

	always @(X, n, inX) begin
		ntmp = n;
		if(X==1) begin
			Q = inX;
			fileHandle = $fopen("exercise7_1.txt");
			while(ntmp!=0) begin
				Q = Q + 1;
				ntmp = ntmp-1;
			end
			disp="Increment and Save";
			$fwrite(fileHandle, "%b", Q);
			$fclose(fileHandle);
		end
		else begin
			mem[0] = 0;
			disp="Read, Rotate, and Update";
			$readmemb("exercise7_1.txt", mem, mem[0], mem[3]);
			Q = mem[0];
			repeat(ntmp) begin
				tmpN = Q[3];
				Q = Q << 1;
				Q[0] = tmpN;
			end
			fileHandle = $fopen("exercise7_1.txt");
			$fwrite(fileHandle, "%b", Q);
			$fclose(fileHandle);
		end
	end
endmodule